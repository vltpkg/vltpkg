---
description: Understanding Graph Modifiers
globs: src/graph/src/modifiers.ts,src/graph/test/modifiers.ts
alwaysApply: false
---
# Graph Modifiers

Understanding and working with Graph Modifiers in the vlt package manager.

<rule>
name: graph_modifiers
description: Guide for configuring and integrating Graph Modifiers (overrides/resolutions and package extensions)
filters:
  # Modifier core and Ideal integration points
  - type: path
    pattern: "^src/graph/src/modifiers\\.ts$"
  - type: path
    pattern: "^src/graph/src/ideal/"
  # DSS parsing/building utilities used by modifiers
  - type: path
    pattern: "^src/dss-(parser|breadcrumb)/"
  # Detect vlt.json modifier usage
  - type: content
    pattern: "\"modifiers\"\s*:"

actions:
  - type: guide
    message: |
      ## What are Graph Modifiers?

      Graph Modifiers are a common API enabling advanced customization of dependency resolution and graph construction:
      - **Overrides / Resolutions**: Replace or pin dependency specs throughout the graph (direct or transitive).
      - **Package Extensions**: Augment package manifests with extra dependency metadata (eg. add missing peerDeps or mark peer deps optional).

      ### Motivation
      Power users frequently need to patch dependency trees quickly—eg. to address security issues, unify versions, or work around abandoned packages. By using the Dependency Selector Syntax (DSS) as the user-facing language, vlt provides expressive, precise, and composable control over graph shape and versions.

  - type: architecture_guide
    message: |
      ## Key Modules
      - `src/graph/src/modifiers.ts` — Tracks graph traversal and applies active modifiers to nodes/edges.
      - `src/graph/src/ideal/*` — Builds the Ideal graph and integrates modifier application during dependency expansion.
      - `src/dss-parser/` — Parses DSS queries.
      - `src/dss-breadcrumb/` — Interactive representation that allows walking a query in lockstep with graph traversal.

  - type: integration_guide
    message: |
      ## User-facing Syntax and UX

      All configuration lives in the project's `vlt.json` under the top-level `"modifiers"` key.

      ### The `modifiers` key
      ```json
      {
        "workspaces": "packages/*",
        "modifiers": {
          
        }
      }
      ```

      ### Edge Modifiers (Overrides / Resolutions)
      Provide a string spec to replace the matched dependency's version/spec:
      ```json
      {
        "modifiers": {
          ":root > #a > #b": "^1.0.0"
        }
      }
      ```

      When multiple selectors match, the most specific selector wins. Example (result should be `1`):
      ```json
      {
        "dependencies": {
          "a": "^1.0.0"
        },
        "modifiers": {
          ":root > #a > #b": "1",
          "#a > #b": "2"
        }
      }
      ```

      Set a unique version for a given dependency across the graph:
      ```json
      {
        "modifiers": {
          "#react": "^19"
        }
      }
      ```

      ### Package Extensions
      Add or adjust dependency declarations for specific packages to fix issues like missing peers or to mark peers optional. Examples vary by selector and extension intent; consult your DSS patterns and package names to scope changes safely.

      ### References
      - npm Overrides: <https://docs.npmjs.com/cli/v11/configuring-npm/package-json#overrides>
      - pnpm Overrides: <https://pnpm.io/settings#overrides>
      - Yarn Resolutions: <https://classic.yarnpkg.com/lang/en/docs/selective-version-resolutions/>
      - Yarn Extensions DB: <https://github.com/yarnpkg/berry/blob/master/packages/yarnpkg-extensions/sources/index.ts>
      - pnpm Package Extensions: <https://pnpm.io/settings#packageextensions>

  - type: development_workflow
    message: |
      ## Development Workflow and Considerations

      - Prefer sharing `monorepo`, `packageJson`, and `scurry` instances across loaders/builders.
      - Use `skipLoadingNodesOnModifiersChange` when reusing a starting graph but modifiers changed since last build.
      - Hidden Lockfile (`node_modules/.vlt-lock.json`) accelerates Actual graph loads. If modifiers changed, rebuild Ideal.
      - Deterministic ordering ensures reproducible lockfiles after modifier changes.

      ### Testing
      - Validate selector specificity precedence.
      - Test overrides across direct and transitive dependencies.
      - Verify package extensions effect on peer/optional semantics.
      - Confirm Ideal graph reuses satisfying nodes to avoid unnecessary network fetches.

examples:
  - input: |
      # Override a transitive dependency
      {
        "modifiers": {
          ":root > #webpack > #browserslist": "^4.23.0"
        }
      }
    output: "Transitive browserslist spec overridden via DSS selector"

  - input: |
      # Pin a single version across the graph
      {
        "modifiers": {
          "#react": "^19"
        }
      }
    output: "All matching react specs unified to ^19"

metadata:
  priority: high
  version: 1.0
  tags:
    - modifiers
    - graph
    - overrides
    - extensions
    - dss
  related_rules:
    - graph_workspace_architecture
    - graph_data_structure
    - graph_lockfiles
</rule>
