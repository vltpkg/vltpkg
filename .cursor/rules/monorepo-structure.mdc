---
description:
globs: 
alwaysApply: true
---
# vltpkg/vltpkg Monorepo Structure

Understanding and navigating the vltpkg monorepo workspace structure.

<rule>
name: monorepo_structure
description: Guide for understanding and working within the vltpkg monorepo structure
filters:
  # Match any work within workspace directories
  - type: path
    pattern: "^(src|infra|www)/"
  # Match package.json files in workspaces
  - type: file_name
    pattern: "package\\.json$"
  # Match workspace-related operations
  - type: event
    pattern: "workspace_.*"

actions:
  - type: guide
    message: |
      ## vltpkg Monorepo Overview

      The https://github.com/vltpkg/vltpkg repository is a monorepo with workspaces organized in three main directories:
      - `src/*` - Reusable packages published to npm registry
      - `infra/*` - Internal infrastructure and build tools
      - `www/*` - Documentation website

      **Package Manager**: This repository uses `pnpm` for dependency management and workspace operations.

      **Monorepo Resources**: Learn more at https://monorepo.tools/

  - type: workspace_guide
    message: |
      ## Workspace Categories

      ### Reusable Packages (`src/*`)
      These are published to npm as `@vltpkg/*` packages:

      **Core Infrastructure:**
      - `src/cache` (`@vltpkg/cache`) - Cache system
      - `src/cache-unzip` (`@vltpkg/cache-unzip`) - Cache entry optimization
      - `src/graph` (`@vltpkg/graph`) - Main data structure managing package installs
      - `src/types` (`@vltpkg/types`) - Common TypeScript types
      - `src/dep-id` (`@vltpkg/dep-id`) - Unique Graph node identifiers
      - `src/spec` (`@vltpkg/spec`) - Package specifier parsing
      - `src/satisfies` (`@vltpkg/satisfies`) - DepID to Spec comparison

      **Dependency Selector Syntax Query Language:**
      - `src/dss-parser` (`@vltpkg/dss-parser`) - Dependency Selector Syntax parser
      - `src/dss-breadcrumb` (`@vltpkg/dss-breadcrumb`) - Interactive DSS query matching
      - `src/query` (`@vltpkg/query`) - Query language implementation

      **Package Management Infrastructure:**
      - `src/package-info` (`@vltpkg/package-info`) - Package information retrieval
      - `src/package-json` (`@vltpkg/package-json`) - package.json file handling
      - `src/registry-client` (`@vltpkg/registry-client`) - Registry API client
      - `src/tar` (`@vltpkg/tar`) - Tarball unpacking
      - `src/workspaces` (`@vltpkg/workspaces`) - Workspace management

      **CLI Commands:**
      - `src/cli-sdk` (`@vltpkg/cli-sdk`) - Core CLI framework and entry point
      - `src/init` (`@vltpkg/init`) - `vlt init` command logic
      - `src/vlx` (`@vltpkg/vlx`) - `vlt exec` command logic
      - `src/run` (`@vltpkg/run`) - Command execution utilities

      **Utilities:**
      - `src/keychain` (`@vltpkg/keychain`) - Secure token storage
      - `src/security-archive` (`@vltpkg/security-archive`) - Socket.dev security data cache
      - `src/semver` (`@vltpkg/semver`) - Semantic version parsing/comparison
      - `src/git` (`@vltpkg/git`) - Git utility spawning
      - `src/error-cause` (`@vltpkg/error-cause`) - Standardized error messages
      - `src/output` (`@vltpkg/output`) - CLI output formatting

      **System Integration:**
      - `src/xdg` (`@vltpkg/xdg`) - OS-specific config/data locations
      - `src/url-open` (`@vltpkg/url-open`) - Default browser URL opening
      - `src/promise-spawn` (`@vltpkg/promise-spawn`) - Process spawning utilities
      - `src/cmd-shim` (`@vltpkg/cmd-shim`) - Command shimming
      - `src/rollback-remove` (`@vltpkg/rollback-remove`) - Safe removal operations

      **Optimized Utilities:**
      - `src/dot-prop` (`@vltpkg/dot-prop`) - Forked dot-prop implementation
      - `src/fast-split` (`@vltpkg/fast-split`) - Optimized String.split() replacement
      - `src/pick-manifest` (`@vltpkg/pick-manifest`) - Manifest selection logic
      - `src/vlt-json` (`@vltpkg/vlt-json`) - Utility to manage the vlt.json file
      - `src/which` (`@vltpkg/which`) - Command location utilities

      **Frontend:**
      - `src/gui` - React/Zustand frontend for Graph visualization (dist files in nested `dist/` folder)
      - `src/server` (`@vltpkg/server`) - Backend server for GUI APIs

      ### Infrastructure (`infra/*`)
      Internal tools and build systems:
      - `infra/benchmark` - Performance benchmarking scripts
      - `infra/cli` - The main vlt CLI distribution
      - `infra/cli-compiled` - Compiled CLI build
      - `infra/cli-*` - Platform-specific CLI builds (darwin-arm64, darwin-x64, linux-arm64, linux-x64, win32-x64)
      - `infra/smoke-test` - CLI integration tests

      ### Documentation (`www/*`)
      - `www/docs` - Source for https://docs.vlt.sh documentation website

  - type: development_workflow
    message: |
      ## Development Workflow

      **Working with Workspaces:**
      1. Navigate to the specific workspace directory (e.g., `cd src/semver`)
      2. Each workspace has its own `package.json` and dependencies
      3. Unit tests are located in each workspace's `test/` folder

      **Code Validation:**
      For all code formatting, linting, testing, coverage, and type checking operations, follow the standardized workflow defined in `@code-validation-workflow.mdc`.

      **Key Development Points:**
      - **100% Test Coverage Required**: All workspaces must maintain complete test coverage
      - **Unit Tests**: Every component has tests in nested `test/` folders - consult these for API usage examples
      - **Type Safety**: All workspaces use TypeScript with strict type checking
      - **Consistent Tooling**: Use pnpm for all package management operations

examples:
  - input: |
      # Working on the semver workspace
      cd src/semver
      # Follow @code-validation-workflow.mdc for validation steps
      
      # Working on the graph workspace  
      cd src/graph
      # Follow @code-validation-workflow.mdc for validation steps
    output: "Properly navigated to workspace and followed validation workflow"

  - input: |
      # Bad: Running commands from wrong directory
      pnpm test  # from repo root
      
      # Good: Navigate to workspace first
      cd src/semver
      # Follow @code-validation-workflow.mdc
    output: "Correctly positioned in workspace for development"

metadata:
  priority: high
  version: 2.0
  tags:
    - monorepo
    - workspaces
    - structure
    - navigation
    - packages
  related_rules:
    - code-validation-workflow  # For all testing, formatting, linting, coverage operations
    - cursor-rules-location     # For proper rule file placement
</rule>
