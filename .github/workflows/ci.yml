name: CI

on:
  workflow_dispatch:
    inputs:
      filter:
        description: 'run-script filter for tests'
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint

    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Use Nodejs 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: pnpm

      - name: Install dependencies
        run: pnpm install

      # These don't need to be recursive since the root is setup to lint all files
      - name: Run Style Linting
        run: pnpm run format:check
        id: style
        continue-on-error: true

      - name: Run Code Linting
        run: pnpm run lint:check
        id: code
        continue-on-error: true

      - name: Check Dependencies
        run: node ./scripts/check-deps.js
        id: deps
        continue-on-error: true

      - name: Check Packages
        run: |
          node ./scripts/consistent-package-json.js
          if [ -n "$(git status --porcelain)" ]; then
            git diff
            exit 1
          fi
        id: pkg
        continue-on-error: true

      - name: Check Results
        run: |
          STYLE="${{ steps.style.outcome }}"
          CODE="${{ steps.code.outcome }}"
          DEPS="${{ steps.deps.outcome }}"
          PKG="${{ steps.pkg.outcome }}"
          echo "Style: $STYLE"
          echo "Code: $CODE"
          echo "Dependencies: $DEPS"
          echo "Packages: $PKG"
          if [ "${STYLE}_${CODE}_${DEPS}_${PKG}" != "success_success_success_success" ]; then
            exit 1
          fi

  test:
    name: Test - ${{ matrix.platform.name }} - ${{ matrix.node-version }}

    strategy:
      matrix:
        node-version: [20.x, 22.x]
        platform:
          - name: Ubuntu
            os: ubuntu-latest
            shell: bash
          - name: macOS
            os: macos-latest
            shell: bash
          - name: macOS Intel
            os: macos-13
            shell: bash
          - name: Windows
            os: windows-latest
            shell: bash
          - name: Windows Powershell
            os: windows-latest
            shell: powershell
        exclude:
          - node-version: ${{ github.event_name == 'pull_request' && '22.x' }}
          - platform: ${{ fromJSON(github.event_name == 'pull_request' && '{"name":"macOS","os":"macos-latest","shell":"bash"}') }}
          - platform: ${{ fromJSON(github.event_name == 'pull_request' && '{"name":"macOS Intel","os":"macos-13","shell":"bash"}') }}
          - platform: ${{ fromJSON(github.event_name == 'pull_request' && '{"name":"Windows Powershell","os":"windows-latest","shell":"powershell"}') }}
      fail-fast: false

    runs-on: ${{ matrix.platform.os }}
    defaults:
      run:
        shell: ${{ matrix.platform.shell }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Fetch base ref
        if: github.event_name == 'pull_request'
        run: git fetch --no-tags --prune --depth=1 origin +refs/heads/${{ github.base_ref }}:refs/remotes/origin/${{ github.base_ref }}

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Use Nodejs ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: pnpm

      - name: Set run-script filters
        id: filters
        shell: bash
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            FILTER="[origin/${{ github.base_ref }}]"
            FILTER_ARG="--filter-prod"
            elif [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ "${{ inputs.filter }}" != "" ]; then
            FILTER="${{ inputs.filter }}"
          fi
          if [ -z "${FILTER}" ]; then
            echo "prepare=--recursive" >> "$GITHUB_OUTPUT"
            echo "test=--recursive" >> "$GITHUB_OUTPUT"
          else
            FILTER_ARG="${FILTER_ARG:---filter}"
            FILTER_TEST="\"...$FILTER\""
            pnpm --fail-if-no-match "$FILTER_ARG" "$FILTER_TEST" exec
            STATUS=$?
            if [[ "$STATUS" -eq 0 ]]; then
              echo "prepare=$FILTER_ARG \"$FILTER...\"" >> "$GITHUB_OUTPUT"
              echo "test=$FILTER_ARG $FILTER_TEST" >> "$GITHUB_OUTPUT"
            fi
          fi
  
      - name: Install dependencies
        if: steps.filters.outputs.prepare
        run: pnpm ${{ steps.filters.outputs.prepare }} install --ignore-scripts

      - name: Prepare
        if: steps.filters.outputs.prepare
        run: pnpm ${{ steps.filters.outputs.prepare }} prepare

      - name: Run Tests
        if: steps.filters.outputs.test
        run: |
          touch .npmrc
          echo "enable-pre-post-scripts=false\n" >> .npmrc
          pnpm ${{ steps.filters.outputs.test }} --no-bail --aggregate-output test
