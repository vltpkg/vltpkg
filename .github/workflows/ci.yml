name: CI

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
    inputs:
      filter:
        description: 'An optional filter to run a subset of workspaces. This will be passed directly to pnpm --filter.'
      full-matrix:
        description: 'Whether to run the full matrix of environments for testing.'
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  pre-check:
    name: Pre-Check
    runs-on: ubuntu-latest
    outputs:
      release-pr: ${{ steps.release-pr.outputs.value }}
      changed: ${{ steps.filters.outputs.changed }}
      dependent: ${{ steps.filters.outputs.dependent }}
      related: ${{ steps.filters.outputs.related }}
      base-ref: ${{ steps.filters.outputs.base-ref }}
      full-matrix: ${{ steps.full-matrix.outputs.value }}
    steps:
      - name: Release PR
        id: release-pr
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" && "${{ github.head_ref }}" == "release" ]]; then
            echo "value=true" >> "$GITHUB_OUTPUT"
          else
            echo "value=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Recursive
        id: recursive
        run: |
          if [[
            "${{ steps.release-pr.outputs.value }}" == "true" ||
            "${{ github.event_name }}" == "push" ||
            ("${{ github.event_name }}" == "workflow_dispatch" && -z "${{ inputs.filter }}")
          ]]; then
            echo "value=true" >> "$GITHUB_OUTPUT"
          else
            echo "value=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Filters
        id: filters
        run: |
          if [[ "${{ steps.recursive.outputs.value }}" == "true" ]]; then
            echo "changed=--recursive" >> "$GITHUB_OUTPUT"
            echo "dependent=--recursive" >> "$GITHUB_OUTPUT"
            echo "related=--recursive" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          if [[ -n "${{ inputs.filter}}" ]]; then
            filter="${{ inputs.filter }}"
          else
            filter="[origin/${{ github.base_ref }}]"
            echo "base-ref=${{ github.base_ref }}" >> "$GITHUB_OUTPUT"
          fi

          echo "changed=--filter \"$filter\"" >> "$GITHUB_OUTPUT"
          echo "dependent=--filter \"...$filter\"" >> "$GITHUB_OUTPUT"
          echo "related=--filter \"...$filter...\"" >> "$GITHUB_OUTPUT"

      - name: Matrix
        id: full-matrix
        run: |
          if [[
            "${{ github.event_name }}" == "push" ||
            "${{ steps.release-pr.outputs.value }}" == "true" ||
            "${{ inputs.full-matrix }}" == "true"
          ]]; then
            echo "value=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          if [[
            "${{ github.event_name }}" == "pull_request" &&
            "${{ github.event.pull_request.title }}" == *"[ci full-matrix]"*
          ]]; then
            echo "value=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "value=false" >> "$GITHUB_OUTPUT"

  lint:
    name: Lint
    # TODO: use filters to run a subset of lint/format
    needs: pre-check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Nodejs
        uses: actions/setup-node@v4
        with:
          node-version: '^22.14.0'
          cache: pnpm
          check-latest: true

      - name: Install Dependencies
        run: pnpm install

      - name: Formatting
        id: format
        continue-on-error: true
        run: pnpm run format:check

      - name: Linting
        id: lint
        continue-on-error: true
        run: pnpm run lint:check

      - name: Dependencies
        id: deps
        continue-on-error: true
        run: pnpm run deps:check

      - name: Docs
        id: docs
        continue-on-error: true
        run: pnpm --filter docs typedoc:check

      - name: Consistent Workspaces
        id: workspaces
        continue-on-error: true
        run: |
          pnpm run fix:pkg
          pnpm -r run tshy
          if [ -n "$(git status --porcelain)" ]; then
            git diff
            exit 1
          fi

      - name: Check Results
        run: |
          declare -A OUTCOMES=(
            [format]="${{ steps.format.outcome }}"
            [lint]="${{ steps.lint.outcome }}"
            [deps]="${{ steps.deps.outcome }}"
            [docs]="${{ steps.docs.outcome }}"
            [workspaces]="${{ steps.workspaces.outcome }}"
          )
          STATUS=0
          for STEP in "${!OUTCOMES[@]}"; do
            OUTCOME="${OUTCOMES[$STEP]}"
            echo "$STEP: $OUTCOME"
            if [ "$OUTCOME" != "success" ]; then
              STATUS=1
            fi
          done
          exit $STATUS

  test:
    name: Test - ${{ matrix.platform.name }} - ${{ matrix.node-version }}
    needs: pre-check
    runs-on: ${{ matrix.platform.os }}
    defaults:
      run:
        shell: ${{ matrix.platform.shell }}
    strategy:
      matrix:
        node-version: [22.x, 24.x]
        platform:
          - name: Ubuntu
            os: ubuntu-latest
            shell: bash
          - name: macOS
            os: macos-latest
            shell: bash
          - name: macOS Intel
            os: macos-13
            shell: bash
          - name: Windows
            os: windows-latest
            shell: bash
          - name: Windows Powershell
            os: windows-latest
            shell: powershell
        exclude:
          - node-version: '24.x'
          - platform: ${{ fromJSON(needs.pre-check.outputs.full-matrix == 'false' && '{"name":"macOS","os":"macos-latest","shell":"bash"}') }}
          - platform: ${{ fromJSON(needs.pre-check.outputs.full-matrix == 'false' && '{"name":"macOS Intel","os":"macos-13","shell":"bash"}') }}
          - platform: ${{ fromJSON(needs.pre-check.outputs.full-matrix == 'false' && '{"name":"Windows Powershell","os":"windows-latest","shell":"powershell"}') }}
      fail-fast: false

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Use Nodejs ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: pnpm
          check-latest: true

      - name: Fetch Git Ref to Compare
        if: needs.pre-check.outputs.base-ref
        run: git fetch --no-tags --prune --depth=1 origin +refs/heads/${{ needs.pre-check.outputs.base-ref }}:refs/remotes/origin/${{ needs.pre-check.outputs.base-ref }}

      - name: Install Dependencies
        run: pnpm ${{ needs.pre-check.outputs.related }} --filter="!smoke-test" install --ignore-scripts

      - name: Prepare
        run: pnpm ${{ needs.pre-check.outputs.related }} --filter="!smoke-test" prepare

      - name: Run Tests
        run: pnpm ${{ needs.pre-check.outputs.dependent }} --filter="!smoke-test" --no-bail --aggregate-output test

  on-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    if: ${{ always() && needs.pre-check.outputs.release-pr == 'true' && (needs.lint.result == 'failure' || needs.test.result == 'failure') }}
    needs:
      - pre-check
      - lint
      - test
    steps:
      - name: Slack Notify
        uses: rtCamp/action-slack-notify@v2.3.3
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_GITHUB_ALERTS_WEBHOOK_URL }}
          SLACK_USERNAME: vltops
          SLACK_CHANNEL: github-alerts
          SLACK_ICON: https://github.com/vltpkg.png
          SLACK_COLOR: failure
          SLACK_FOOTER: ''
          SLACKIFY_MARKDOWN: true
          MSG_MINIMAL: 'actions url,commit'
          SLACK_TITLE: ${{ github.event.pull_request.title }} Lint/Test Failed
          SLACK_MESSAGE: |
            [PR ${{ github.event.number }}](https://github.com/${{ github.repository }}/pull/${{ github.event.number }})
            Lint: ${{ needs.lint.result == 'failure' && ':x:' || ':white_check_mark:' }}
            Test: ${{ needs.test.result == 'failure' && ':x:' || ':white_check_mark:' }}
