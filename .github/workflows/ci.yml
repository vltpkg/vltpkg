name: CI

on:
  workflow_dispatch:
    inputs:
      filter:
        description: 'A pnpm filter to run only a subset of tests. Leave blank to run all tests.'
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect-filter:
    name: Detect Filter
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.filters.outputs.changed }}
      dependent: ${{ steps.filters.outputs.dependent }}
      related: ${{ steps.filters.outputs.related }}
      matrix: ${{ steps.filters.outputs.matrix }}
      git-ref: ${{ steps.filters.outputs.git-ref }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set run-script filters
        id: filters
        run: |
          BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"

          # Non release PRs run only changes from main and the smaller matrix
          if [[ "${{ github.event_name }}" == "pull_request" ]] && [[ "$BRANCH" != "release" ]]; then
            filter="[origin/${{ github.base_ref }}]"
            echo "changed=--filter \"$filter\"" >> "$GITHUB_OUTPUT"
            echo "dependent=--filter \"...$filter\"" >> "$GITHUB_OUTPUT"
            echo "related=--filter \"...$filter...\"" >> "$GITHUB_OUTPUT"
            echo "matrix=limited" >> "$GITHUB_OUTPUT"
            echo "git-ref=${{ github.base_ref }}" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Dispatched workflows only run the filter that is passed in and the smaller matrix
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            filter="${{ inputs.filter }}"
            if [[ -n "$filter" ]]; then              
              echo "changed=--filter \"$filter\"" >> "$GITHUB_OUTPUT"
              echo "dependent=--filter \"...$filter\"" >> "$GITHUB_OUTPUT"
              echo "related=--filter \"...$filter...\"" >> "$GITHUB_OUTPUT"
              echo "matrix=limited" >> "$GITHUB_OUTPUT"
              exit 0
            fi
          fi

          # Default is the full matrix of all tests
          echo "changed=--recursive" >> "$GITHUB_OUTPUT"
          echo "dependent=--recursive" >> "$GITHUB_OUTPUT"
          echo "related=--recursive" >> "$GITHUB_OUTPUT"
          echo "matrix=full" >> "$GITHUB_OUTPUT"

  lint:
    name: Lint
    # TODO: use filters to run a subset of lint/format
    # needs: detect-filter
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Setup Nodejs
        uses: actions/setup-node@v4
        with:
          node-version: '^22.14.0'
          cache: pnpm
          check-latest: true

      - name: Install dependencies
        run: pnpm install

      - name: Formatting
        run: pnpm run format:check
        id: format
        continue-on-error: true

      - name: Linting
        run: pnpm run lint:check
        id: lint
        continue-on-error: true

      - name: Dependencies
        run: pnpm run deps:check
        id: deps
        continue-on-error: true

      - name: Docs
        run: pnpm --filter docs typedoc:check
        id: docs
        continue-on-error: true

      - name: Consistent Workspaces
        run: |
          pnpm run fix:pkg
          if [ -n "$(git status --porcelain)" ]; then
            git diff
            exit 1
          fi
        id: workspaces
        continue-on-error: true

      - name: Check Results
        run: |
          declare -A OUTCOMES=(
            [format]="${{ steps.format.outcome }}"
            [lint]="${{ steps.lint.outcome }}"
            [deps]="${{ steps.deps.outcome }}"
            [docs]="${{ steps.docs.outcome }}"
            [workspaces]="${{ steps.workspaces.outcome }}"
          )
          STATUS=0
          for STEP in "${!OUTCOMES[@]}"; do
            OUTCOME="${OUTCOMES[$STEP]}"
            echo "$STEP: $OUTCOME"
            if [ "$OUTCOME" != "success" ]; then
              STATUS=1
            fi
          done
          exit $STATUS

  test:
    name: Test - ${{ matrix.platform.name }} - ${{ matrix.node-version }}
    needs: detect-filter
    runs-on: ${{ matrix.platform.os }}
    defaults:
      run:
        shell: ${{ matrix.platform.shell }}
    strategy:
      matrix:
        node-version: [22.x]
        platform:
          - name: Ubuntu
            os: ubuntu-latest
            shell: bash
          - name: macOS
            os: macos-latest
            shell: bash
          - name: macOS Intel
            os: macos-13
            shell: bash
          - name: Windows
            os: windows-latest
            shell: bash
          - name: Windows Powershell
            os: windows-latest
            shell: powershell
        exclude:
          - platform: ${{ fromJSON(needs.detect-filter.outputs.matrix == 'limited' && '{"name":"macOS","os":"macos-latest","shell":"bash"}') }}
          - platform: ${{ fromJSON(needs.detect-filter.outputs.matrix == 'limited' && '{"name":"macOS Intel","os":"macos-13","shell":"bash"}') }}
          - platform: ${{ fromJSON(needs.detect-filter.outputs.matrix == 'limited' && '{"name":"Windows Powershell","os":"windows-latest","shell":"powershell"}') }}
      fail-fast: false

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Fetch Git Ref to Compare
        if: needs.detect-filter.outputs.git-ref
        run: git fetch --no-tags --prune --depth=1 origin +refs/heads/${{ needs.detect-filter.outputs.git-ref }}:refs/remotes/origin/${{ needs.detect-filter.outputs.git-ref }}

      - uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Use Nodejs ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: pnpm
          check-latest: true

      - name: Install dependencies
        run: pnpm ${{ needs.detect-filter.outputs.related }} install --ignore-scripts

      - name: Prepare
        run: pnpm ${{ needs.detect-filter.outputs.related }} prepare

      - name: Run Tests
        run: pnpm ${{ needs.detect-filter.outputs.dependent }} --filter="!smoke-test" --no-bail --aggregate-output test

      - name: Needs Smoke Test
        id: smoke-test
        shell: bash
        run: |
          if [[ "${{ needs.detect-filter.outputs.matrix }}" == "full" ]]; then
            echo "value=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          if pnpm ${{ needs.detect-filter.outputs.changed }} exec pwd | grep "smoke-test"; then
            echo "value=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "value=false" >> "$GITHUB_OUTPUT"

      - name: Smoke Tests
        if: steps.smoke-test.outputs.value == 'true'
        run: pnpm --filter smoke-test test
