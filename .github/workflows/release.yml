name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      action:
        description: 'Override action to take instead of reading from latest commit'
        type: choice
        options:
          - pr
          - publish
      dry-run:
        description: 'Dry run the PR creation or release'
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  pre-check:
    name: Pre-Check
    runs-on: ubuntu-latest
    outputs:
      action: ${{ steps.action.outputs.value }}g
      dry-run: ${{ steps.dry-run.outputs.value }}
    steps:
      - name: Dry Run
        id: dry-run
        run: echo "value=${{ inputs.dry-run }}" >> $GITHUB_OUTPUT

      - name: Action
        id: action
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ inputs.action }}" ]]; then
            echo "value=${{ inputs.action }}" >> $GITHUB_OUTPUT
            exit 0
          fi
          if [[ "$(git log -1 --pretty=%B | head -n 1)" =~ ^Release\ v ]]; then
            echo "value=publish" >> $GITHUB_OUTPUT
          else
            echo "value=pr" >> $GITHUB_OUTPUT
          fi

  pr:
    name: Release PR
    runs-on: ubuntu-latest
    needs: pre-check
    if: needs.pre-check.outputs.action == 'pr'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Setup Nodejs
        uses: actions/setup-node@v4
        with:
          node-version: '^22.14.0'
          cache: pnpm
          check-latest: true

      - name: Install dependencies
        run: pnpm install

      - name: Get Previous CLI Version Number
        id: previous-version
        run: echo "value=$(jq -r .version ./infra/cli-compiled/package.json)" >> $GITHUB_OUTPUT

      - name: Version CLI Packages
        run: pnpm --filter="./infra/cli-*" exec npm version prerelease --no-git-tag-version

      - name: Get CLI Version Number
        id: version
        run: echo "value=$(jq -r .version ./infra/cli-compiled/package.json)" >> $GITHUB_OUTPUT

      # TODO: use git history to determine other packages to bump
      - name: Version Workspaces
        run: pnpm --filter "./src/*" exec npm version ${{ steps.version.outputs.value }} --no-git-tag-version

      - name: Commit Version Bumps
        run: |
          git config --global user.email "vltops@users.noreply.github.com"
          git config --global user.name "vltops"
          git add -A
          git commit -m "Release v${{ steps.version.outputs.value }}"

      - name: Pack
        run: pnpm --filter="[$(git rev-parse HEAD~1)]" --workspace-concurrency=1 exec pnpm pack

      - name: Full integrity
        id: integrity
        run: |
          delimiter="$(openssl rand -hex 8)"
          integrity=$(./scripts/tgz-ssri.js)

          echo "$integrity"
          {
            echo "value<<${delimiter}"
            echo "$integrity"
            echo "${delimiter}"
          } >> "${GITHUB_OUTPUT}"

      - name: List Packages
        id: packages
        run: |
          delimiter="$(openssl rand -hex 8)"
          commit="$(git rev-parse HEAD~1)"

          format() {
            local name="$1"
            local filter="$2"

            local packages
            packages=$(pnpm --shell-mode --filter="{./$filter/}[$commit]" exec "pwd" | sort)

            echo "$packages"
            {
              echo "${name}<<${delimiter}"
              while IFS= read -r package_dir; do
                local package_json="$package_dir/package.json"
                local package_name=$(jq -r '.name' "$package_json")
                local package_version=$(jq -r '.version' "$package_json")
                local integrity=$(./scripts/tgz-ssri.js "$package_dir")
                echo "- \`$package_name@$package_version\` (\`${integrity:0:20}...\`)"
              done <<< "$packages"
              echo "${delimiter}"
            } >> "${GITHUB_OUTPUT}"
          }

          format "clis" "infra"
          format "workspaces" "src"

      - name: Undo Pack Local Changes
        run: |
          git status
          git diff
          git checkout -- 'src/*/package.json'

      - name: Create or Update PR
        id: pr
        if: needs.pre-check.outputs.dry-run != 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          title: 'Release v${{ steps.version.outputs.value }}'
          commit-message: 'Release v${{ steps.version.outputs.value }}'
          branch: release
          base: main
          labels: release
          author: 'vltops <vltops@users.noreply.github.com>'
          committer: 'vltops <vltops@users.noreply.github.com>'
          token: ${{ secrets.RELEASE_WORKFLOW_TOKEN }}
          draft: always-true
          body: |
            ## Release v${{ steps.version.outputs.value }}

            :rotating_light: Merging this PR will publish these packages :rotating_light:

            [Compare to v${{ steps.previous-version.outputs.value }}](https://github.com/vltpkg/vltpkg/compare/v${{ steps.previous-version.outputs.value }}...release)

            ### CLI
            ${{ steps.packages.outputs.clis }}

            ### Workspaces
            ${{ steps.packages.outputs.workspaces }}

            <details><summary>Integrity</summary>
            <p>

            ```
            ${{ steps.integrity.outputs.value }}
            ```

            </p>
            </details>

            ---

            Steps to merge:

            ```bash
            gh pr ready -R vltpkg/vltpkg release
            ```

            ```bash
            gh pr review -R vltpkg/vltpkg --approve release
            ```

            ```bash
            gh pr merge -R vltpkg/vltpkg --rebase release
            ````

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: pre-check
    if: needs.pre-check.outputs.action == 'publish'
    permissions:
      contents: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Setup Nodejs
        uses: actions/setup-node@v4
        with:
          node-version: '^22.14.0'
          cache: pnpm
          check-latest: true

      - name: Install dependencies
        run: pnpm install

      - name: List Packages to Publish
        run: pnpm --shell-mode --filter="[$(git rev-parse HEAD~1)]" exec "cat package.json | jq -r '\"\(.name)@\(.version)\"'" | sort

      - name: Publish
        run: |
          echo "//registry.npmjs.org/:_authToken=\${NPM_AUTH_TOKEN}" > .npmrc
          pnpm publish \
            --filter="[$(git rev-parse HEAD~1)]" \
            --access=public \
            --no-git-checks \
            --publish-branch="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" \
            ${{ needs.pre-check.outputs.dry-run == 'true' && '--dry-run' }}
        env:
          NPM_AUTH_TOKEN: ${{ secrets.VLT_CLI_PUBLISH_TOKEN }}

      - name: Create Git Tag
        if: needs.pre-check.outputs.dry-run != 'true'
        run: |
          VERSION=$(jq -r .version ./infra/cli-compiled/package.json)
          git config --global user.email "vltops@users.noreply.github.com"
          git config --global user.name "vltops"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"
