name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      action:
        description: 'Override action to take instead of reading from latest commit'
        type: choice
        options:
          - pr
          - publish
      dryRun:
        description: 'Dry run the PR creation or release'
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect-action:
    name: Detect Release Action
    runs-on: ubuntu-latest
    outputs:
      action: ${{ steps.action.outputs.value }}
      dry-run: ${{ steps.dry-run.outputs.value }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Determine Dry run
        id: dry-run
        run: echo "value=${{ inputs.dryRun }}" >> $GITHUB_OUTPUT

      - name: Determine Action
        id: action
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ -n "${{ inputs.action }}" ]]; then
              echo "value=${{ inputs.action }}" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi
          MESSAGE=$(git log -1 --pretty=%B | head -n 1)
          if [[ "$MESSAGE" =~ ^Release\ v ]]; then
            echo "value=publish" >> $GITHUB_OUTPUT
          else
            echo "value=pr" >> $GITHUB_OUTPUT
          fi

  pr:
    name: Release PR
    runs-on: ubuntu-latest
    needs: detect-action
    if: needs.detect-action.outputs.action == 'pr'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Setup Nodejs
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: pnpm
          check-latest: true

      - name: Install dependencies
        run: pnpm install

      - name: Version CLI Packages
        run: pnpm --filter "./infra/cli*" exec npm version prerelease --no-git-tag-version

      - name: Get CLI Version Number
        id: version
        run: echo "value=$(jq -r .version ./infra/cli/package.json)" >> $GITHUB_OUTPUT

      # TODO: use git history to determine other packages to bump
      - name: Version Workspaces
        run: pnpm --filter "./src/*" exec npm version ${{ steps.version.outputs.value }} --no-git-tag-version

      - name: Commit Version Bumps
        run: |
          git config --global user.email "vltops@users.noreply.github.com"
          git config --global user.name "vltops"
          git add -A
          git commit -m "Release v${{ steps.version.outputs.value }}"

      - name: Pack
        run: pnpm --filter "[$(git rev-parse HEAD~1)]" exec pnpm pack

      - name: List Packages
        id: packages
        run: |
          packages=$(pnpm --shell-mode --filter="[$(git rev-parse HEAD~1)]" exec "cat package.json | jq -r '\"\(.name)@\(.version)\"'" | sort)
          delimiter="$(openssl rand -hex 8)"
          echo "name-version<<${delimiter}" >> "${GITHUB_OUTPUT}"
          echo $packages >> "${GITHUB_OUTPUT}"
          echo "${delimiter}" >> "${GITHUB_OUTPUT}"

      - name: Dry Run Publish
        run: |
          pnpm publish \
            --filter="[$(git rev-parse HEAD~1)]" \
            --access=public \
            --no-git-checks \
            --dry-run

      - name: Undo Pack Local Changes
        run: |
          git status
          git diff
          git checkout -- .

      - name: Create or Update PR
        id: pr
        if: needs.detect-action.outputs.dry-run != 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          title: 'Release v${{ steps.version.outputs.value }}'
          commit-message: 'Release v${{ steps.version.outputs.value }}'
          branch: release
          base: main
          labels: release
          author: 'vltops <vltops@users.noreply.github.com>'
          committer: 'vltops <vltops@users.noreply.github.com>'
          token: ${{ secrets.RELEASE_WORKFLOW_TOKEN }}
          draft: always-true
          body: |
            ## Release v${{ steps.version.outputs.value }}

            :rotating_light: Merging this PR will publish the following packages :rotating_light:

            ```
            ${{ steps.packages.outputs.name-version }}
            ```

            Steps to merge:

            1. [ ] `gh pr review -R vltpkg/vltpkg --approve {{ PR_NUMBER }}`
            2. [ ] `gh pr merge -R vltpkg/vltpkg --rebase {{ PR_NUMBER }}`

      - name: Update PR Body
        uses: actions/github-script@v7
        if: steps.pr.outputs.pull-request-number
        env:
          PR_NUMBER: ${{ steps.pr.outputs.pull-request-number }}
        with:
          github-token: ${{ secrets.RELEASE_WORKFLOW_TOKEN }}
          script: |
            const { PR_NUMBER } = process.env
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: PR_NUMBER
            });
            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: PR_NUMBER,
              body: pr.body.replaceAll('{{ PR_NUMBER }}', PR_NUMBER)
            });

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: detect-action
    if: needs.detect-action.outputs.action == 'publish'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Setup Nodejs
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: pnpm
          check-latest: true

      - name: Install dependencies
        run: pnpm install

      - name: List Packages to Publish
        run: pnpm --shell-mode --filter="[$(git rev-parse HEAD~1)]" exec "cat package.json | jq -r '\"\(.name)@\(.version)\"'" | sort

      - name: Publish
        run: |
          pnpm publish \
            --filter="[$(git rev-parse HEAD~1)]" \
            --access=public \
            --no-git-checks \
            --publish-branch="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" \
            ${{ needs.detect-action.outputs.dry-run == 'true' && '--dry-run' }}
        env:
          npm_config__authtoken: ${{ secrets.VLT_CLI_PUBLISH_TOKEN }}
