{
  "name": "@vltpkg/vsr",
  "version": "0.0.0-29",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/vltpkg/vltpkg.git",
    "directory": "src/registry"
  },
  "author": "vlt technology inc. <support@vlt.sh> (http://vlt.sh)",
  "bin": "./dist/bin/vsr.js",
  "dependencies": {
    "@hono/sentry": "^1.2.2",
    "@hono/zod-openapi": "^0.19.10",
    "@libsql/client": "^0.15.14",
    "@scalar/hono-api-reference": "^0.9.16",
    "@vltpkg/package-info": "workspace:*",
    "@vltpkg/package-json": "workspace:*",
    "@vltpkg/server": "workspace:*",
    "@vltpkg/vlt-json": "workspace:*",
    "drizzle-orm": "^0.44.5",
    "hono": "^4.9.5",
    "minargs": "^2.1.0",
    "path-scurry": "catalog:",
    "semver": "catalog:",
    "validate-npm-package-name": "6.0.2",
    "wrangler": "^4.33.1",
    "zod": "^3.25.76"
  },
  "devDependencies": {
    "@cloudflare/vitest-pool-workers": "^0.8.68",
    "@cloudflare/workers-types": "^4.20250829.0",
    "@types/node": "catalog:",
    "@types/validate-npm-package-name": "^4.0.2",
    "@vltpkg/gui": "workspace:*",
    "chokidar-cli": "^3.0.0",
    "drizzle-kit": "^0.31.4",
    "esbuild": "^0.25.9",
    "eslint": "catalog:",
    "typedoc": "catalog:",
    "typescript": "catalog:",
    "typescript-eslint": "catalog:",
    "vitest": "^3.2.4"
  },
  "license": "FSL-1.1-MIT",
  "engines": {
    "node": ">=22"
  },
  "scripts": {
    "build": "pnpm build:dist && pnpm build:assets && pnpm build:worker && pnpm build:bin",
    "build:assets": "node scripts/build-assets.js",
    "build:bin": "node scripts/build-bin.js",
    "build:dist": "node -e \"const fs=require('fs'); fs.rmSync('./dist', {recursive: true, force: true}); fs.mkdirSync('./dist/assets/public', {recursive: true});\"",
    "build:worker": "npx wrangler deploy --dry-run --outdir dist",
    "db:drop": "npx wrangler d1 execute vsr-local-database --file=src/db/migrations/drop.sql --local --persist-to=local-store --no-remote && node -e \"const fs=require('fs'); fs.rmSync('local-store',{recursive:true,force:true}); fs.rmSync('.wrangler',{recursive:true,force:true});\"",
    "db:generate": "drizzle-kit generate",
    "db:migrate": "drizzle-kit migrate",
    "db:push": "drizzle-kit push",
    "db:setup": "npx wrangler d1 execute vsr-local-database --file=src/db/migrations/0000_initial.sql --local --persist-to=local-store --no-remote && npx wrangler d1 execute vsr-local-database --file=src/db/migrations/0001_wealthy_magdalene.sql --local --persist-to=local-store --no-remote",
    "db:studio": "drizzle-kit studio --port 4985",
    "deploy": "pnpm build && npx wrangler deploy",
    "format": "prettier --write . --log-level warn --ignore-path ../../.prettierignore --cache",
    "format:check": "prettier --check . --ignore-path ../../.prettierignore --cache",
    "postinstall": "node -e \"const fs=require('fs'); process.exit(fs.existsSync('local-store') || process.env.VERCEL ? 0 : 1);\" || (npx wrangler d1 execute vsr-local-database --file=src/db/migrations/0000_initial.sql --local --persist-to=local-store --no-remote && npx wrangler d1 execute vsr-local-database --file=src/db/migrations/0001_wealthy_magdalene.sql --local --persist-to=local-store --no-remote)",
    "lint": "eslint . --fix",
    "lint:check": "eslint .",
    "prepack": "pnpm build",
    "serve:build": "pnpm --silent build && node ./dist/bin/vsr.js --debug --daemon=false",
    "serve:build:daemon": "pnpm --silent build && node ./dist/bin/vsr.js --debug --daemon=true",
    "serve:death": "echo \"Killing wrangler dev processes...\" && (pkill -f 'wrangler.*dev' || true) && sleep 1 && (pids=$(lsof -ti :1337 2>/dev/null; lsof -ti :3000 2>/dev/null) && [ -n \"$pids\" ] && echo \"Force killing remaining processes: $pids\" && kill -9 $pids || echo \"No remaining processes found\") && echo \"Done.\"",
    "serve:watch": "chokidar './src/**/*' -c 'pnpm serve:death && pnpm serve:build'",
    "snap": "vitest --no-watch -u",
    "pretest": "pnpm build",
    "test": "vitest --no-watch",
    "posttest": "tsc --noEmit",
    "typecheck": "tsc --noEmit",
    "typecheck:worker": "tsc -p tsconfig.worker.json --noEmit"
  },
  "type": "module"
}
